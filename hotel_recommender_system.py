# -*- coding: utf-8 -*-
"""Hotel_Recommender_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11upV5WIhFDkK2GZMHlgjIdSBmLAWY3xA
"""

import re
import numpy as np
import streamlit as st
from datetime import datetime, timedelta
import nltk
from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag
from openai import AzureOpenAI
import pandas as pd
import matplotlib.pyplot as plt

# -------------------
# NLTK Setup
# -------------------
nltk.download("punkt", quiet=True)
nltk.download("averaged_perceptron_tagger", quiet=True)

# -------------------
# Azure OpenAI Setup
# -------------------
client = AzureOpenAI(
    azure_endpoint="https://YOUR_AZURE_ENDPOINT.openai.azure.com/",
    api_key="YOUR_API_KEY",
    api_version="2024-08-01-preview"
)

EMBEDDING_MODEL = "azure/genailab-maas-text-embedding-3-large"

# -------------------
# Dummy Hotel Dataset
# -------------------
HOTELS = [
    {
        "id": "h1",
        "name": "Sea Breeze Resort",
        "description": "Beautiful resort facing the sea, with private beach access.",
        "price": 200.0,
        "currency": "USD",
        "amenities": ["sea front", "breakfast included", "wifi", "non-smoking"],
        "rating": 8.5,
        "location": "Goa",
        "sightseeing": ["Calangute Beach", "Fort Aguada", "Dona Paula Viewpoint"]
    },
    {
        "id": "h2",
        "name": "Lakeview Serenity Hotel",
        "description": "Boutique hotel with serene lake views and free breakfast.",
        "price": 150.0,
        "currency": "USD",
        "amenities": ["lake view", "wifi", "non-smoking"],
        "rating": 7.9,
        "location": "Udaipur",
        "sightseeing": ["City Palace", "Jag Mandir", "Lake Pichola"]
    },
    {
        "id": "h3",
        "name": "Budget Stay Central",
        "description": "Affordable hotel near city center with basic amenities.",
        "price": 80.0,
        "currency": "USD",
        "amenities": ["wifi", "parking"],
        "rating": 6.5,
        "location": "New York",
        "sightseeing": ["Times Square", "Central Park", "Empire State Building"]
    },
    {
        "id": "h4",
        "name": "Luxury Grand Palace",
        "description": "Premium hotel with top-class dining and city views.",
        "price": 300.0,
        "currency": "USD",
        "amenities": ["spa", "non-smoking", "breakfast included"],
        "rating": 9.0,
        "location": "Jaipur",
        "sightseeing": ["Hawa Mahal", "Amber Fort", "City Palace"]
    },
]

# -------------------
# Extract preferences
# -------------------
def extract_preferences(prompt: str):
    tokens = word_tokenize(prompt)
    pos_tag(tokens)

    adults, children, budget, check_in, check_out = 1, 0, None, None, None

    m = re.search(r"(\d+)\s*adults?", prompt, re.IGNORECASE)
    if m:
        adults = int(m.group(1))

    m = re.search(r"(\d+)\s*children?", prompt, re.IGNORECASE)
    if m:
        children = int(m.group(1))

    m = re.search(r"\$?(\d+)\s*(usd|rs|inr)?", prompt, re.IGNORECASE)
    if m:
        budget = int(m.group(1))

    m = re.findall(r"\d{4}-\d{2}-\d{2}", prompt)
    if len(m) >= 2:
        check_in, check_out = m[0], m[1]

    return {
        "adults": adults,
        "children": children,
        "budget": budget,
        "check_in": check_in,
        "check_out": check_out
    }

# -------------------
# Dynamic Pricing
# -------------------
def calculate_daywise_price(base_price, check_in, check_out):
    if not check_in or not check_out:
        return []

    start = datetime.strptime(check_in, "%Y-%m-%d")
    end = datetime.strptime(check_out, "%Y-%m-%d")
    days = (end - start).days

    breakdown = []
    for i in range(days):
        day = start + timedelta(days=i)
        multiplier = 1.0

        if day.weekday() >= 4:  # Fri-Sun
            multiplier = 1.2
        else:
            multiplier = 0.9

        if day.month in [5, 6, 12]:  # peak season
            multiplier *= 1.3

        price = base_price * multiplier
        breakdown.append({"date": day.strftime("%Y-%m-%d"), "price": round(price, 2)})

    return breakdown

# -------------------
# Cosine similarity
# -------------------
def cosine_similarity(a, b):
    return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))

# -------------------
# Rerank hotels
# -------------------
def rerank_hotels(user_query, prefs):
    user_emb = client.embeddings.create(model=EMBEDDING_MODEL, input=user_query).data[0].embedding

    results = []
    for h in HOTELS:
        if h["rating"] < 3:
            continue

        daywise = calculate_daywise_price(h["price"], prefs["check_in"], prefs["check_out"])
        if not daywise:
            continue

        total_price = sum(d["price"] for d in daywise) * (prefs["adults"] + prefs["children"] * 0.5)
        if prefs["budget"] and total_price > prefs["budget"]:
            continue

        hotel_emb = client.embeddings.create(model=EMBEDDING_MODEL, input=h["description"]).data[0].embedding
        sim = cosine_similarity(user_emb, hotel_emb)

        results.append((h, total_price, daywise, sim))

    results.sort(key=lambda x: (-x[3], x[1]))
    return results

# -------------------
# Format Answer
# -------------------
def format_answer(results, prefs):
    if not results:
        return "Sorry, no hotels match your budget and preferences."

    msg = ["Welcome to AI Hotel booking system:\n"]
    for i, (h, total_price, daywise, sim) in enumerate(results[:3], 1):
        sea_or_not = "Yes" if "sea front" in h["amenities"] or "lake view" in h["amenities"] else "No"
        msg.append(f"{i}. Hotel: {h['name']}")
        msg.append(f"   Fare should be: {total_price:.2f} {h['currency']} for {prefs['adults']} adults and {prefs['children']} children")
        msg.append(f"   Sea front or not: {sea_or_not}")
        msg.append(f"   Hotel Rating is: {h['rating']}")
        msg.append(f"   Sightseeing places nearby: {', '.join(h['sightseeing'])}")
        msg.append("")
    return "\n".join(msg)

# -------------------
# Streamlit UI
# -------------------
def main():
    st.title("üè® AI Hotel Booking Assistant")
    st.write("Ask me to book hotels with your preferences, dates, adults, children, and budget.")

    user_input = st.text_area("Enter your hotel booking request (include dates in YYYY-MM-DD format):")
    if st.button("Find Hotels"):
        prefs = extract_preferences(user_input)
        results = rerank_hotels(user_input, prefs)

        st.text(format_answer(results, prefs))

        if results:
            for h, total_price, daywise, _ in results[:3]:
                with st.expander(f"üìÖ Day-wise price breakdown for {h['name']}"):
                    df = pd.DataFrame(daywise)
                    df["Total for Guests"] = df["price"] * (prefs["adults"] + prefs["children"] * 0.5)
                    st.table(df)

                    # Line chart for prices
                    fig, ax = plt.subplots()
                    ax.plot(df["date"], df["Total for Guests"], marker="o", label="Total Price for Guests")
                    ax.set_title(f"Price Trend for {h['name']}")
                    ax.set_xlabel("Date")
                    ax.set_ylabel(f"Price ({h['currency']})")
                    ax.legend()
                    plt.xticks(rotation=45)
                    st.pyplot(fig)


if __name__ == "__main__":
    main()